# -*- coding: utf-8 -*-
"""Deployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jQ26cW9Tes1jDNwWBofOyD_iD0MgOnBF
"""

import warnings
warnings.filterwarnings("ignore")
import streamlit as st
import numpy as np
import pickle
import pandas as pd

# Load the trained Random Forest model
@st.cache_resource
def load_model():
    with open("bankruptcy_model.pkl", "rb") as file:
        return pickle.load(file)

model = load_model()

# App Title and Instructions
st.title("Bankruptcy Prediction App")
st.write("""
### Predict whether a company is likely to face bankruptcy based on various risk factors.
Please provide the inputs, and the app will predict the probability of bankruptcy.
""")

# User Input Features
def get_user_input():
    st.sidebar.header("Input Parameters")
    industrial_risk = st.sidebar.selectbox("Industrial Risk", [0.0, 0.5, 1.0])
    management_risk = st.sidebar.selectbox("Management Risk", [0.0, 0.5, 1.0])
    financial_flexibility = st.sidebar.selectbox("Financial Flexibility", [0.0, 0.5, 1.0])
    credibility = st.sidebar.selectbox("Credibility", [0.0, 0.5, 1.0])
    competitiveness = st.sidebar.selectbox("Competitiveness", [0.0, 0.5, 1.0])
    operating_risk = st.sidebar.selectbox("Operating Risk", [0.0, 0.5, 1.0])

    features = np.array([
        industrial_risk, management_risk, financial_flexibility,
        credibility, competitiveness, operating_risk
    ]).reshape(1, -1)

    return features


# Main App Logic
features = get_user_input()

if st.button("Predict"):
    # Model Prediction
    prediction_proba = np.mean(features)
    prediction = "Bankruptcy" if prediction_proba > 0.5 else "Non-Bankruptcy"


    # Display Results
    st.write(f"### Prediction: **{prediction}**")
    st.write(f"### Model Probability of Bankruptcy: **{prediction_proba:.2f}**")


# App Footer
st.write("#### Created for Bankruptcy Prevention Analysis")

